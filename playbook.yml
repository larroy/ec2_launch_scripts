--- # Ansible playbook to provision instances for myself
- name: provisioning with Ansible
  hosts: all
  gather_facts: no
  become: true
  become_user: root
  tasks:

    - apt_repository:
        repo: ppa:fish-shell/release-3
    - apt:
        update_cache: yes
        dpkg_options: 'force-confold,force-confdef'
        name:
            - vim-nox
            - cgdb
            - fish
            - vim-nox
            - nmon
            - silversearcher-ag
            - tree
            - git
            - openssh-client
            - bwm-ng
            - htop
#            - openjdk-9-jdk-headless
            - python3-virtualenv
            - python3-pip
            - mc
            - links
            - lynx
            - iptables-persistent
            - nmap
            - build-essential
            - cmake
            - ninja-build
            - curl
            - libatlas-base-dev
            - libjemalloc-dev
            - liblapack-dev
            - libopenblas-dev
            - libopencv-dev
            - libzmq3-dev
            - software-properties-common
            - sudo
            - unzip
            - wget
            - sysstat
            - awscli
            - ccache
            - virtualenv
            - python3-setuptools
            - python-setuptools
            - libcurl4-openssl-dev
    - apt:
        state: absent
        name:
            - btrfs-progs
            - btrfs-tools

    - name: Allow attaching gdb
      lineinfile:
        dest: /etc/sysctl.d/10-ptrace.conf
        state: present
        regexp: '^kernel.yama.ptrace_scope'
        line: 'kernel.yama.ptrace_scope = 0'



#
# User setup
#

    - name: Add wheel group
      group:
        name: wheel
        state: present

    - name: Add user {{ user_name }} to group wheel
      user:
        name: "{{ user_name }}"
        groups: wheel
        shell: /bin/bash

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'



#
# Wait for raid setup to finish
#

    - name: Wait for userdata to finish
      wait_for:
        path: /root/userdata_complete
        state: present
        timeout: 1200
        sleep: 3


    - name: sync homedir/ to /home/{{ user_name }}
      synchronize:
        src: homedir/
        dest: /home/{{ user_name }}/

    - name: Configure /home/{{ user_name }}
      file:
        path: /home/{{ user_name }}
        recurse: yes
        owner: "{{ user_name }}"
        group: "{{ user_name }}"

    - name: Set authorized key taken from file
      authorized_key:
        user: "{{ user_name }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - file:
        path: /home/{{ user_name }}/.ssh/
        mode: 0700

#    - file:
#        path: /home/{{ user_name }}/.ssh/id_rsa
#        mode: 0600

    - name: set permissions in /home/{{ user_name }}/bin
      file:
        path: /home/{{ user_name }}/bin
        mode: "u=rwx,g=rx,o=rx"
        recurse: yes

    - name: disable StrictHostKeyChecking for ssh
      lineinfile:
        dest: /home/{{ user_name }}/.ssh/config
        state: present
        line: 'StrictHostKeyChecking=no'
        create: yes



#
# Other
#
    - name: adjust ccache max size to 50G
      command: ccache -M50G

      #- name: Custom commands
      #  hosts: all
      #  gather_facts: no
      #  become: true
      #  become_user: root
      #  tasks:
      #    - name: Change shell to fish
      #      shell: chsh -s `which fish` {{ user_name }}


# Other playbooks
#
- import_playbook: playbooks/docker.yml
- import_playbook: playbooks/gpu.yml
#- import_playbook: playbooks/efa.yml
#- import_playbook: playbooks/mpi.yml
#- import_playbook: playbooks/datasets.yml
